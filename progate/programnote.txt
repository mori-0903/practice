CSSのメモ

#Twitterのアイコンの出し方
span class="fa fa-twitter"></span>

値を1つ指定した場合：	指定した値が[上下左右]のパディングになります。
値を2つ指定した場合：	記述した順に[上下][左右]のパディングになります。
値を3つ指定した場合：	記述した順に[上][左右][下]のパディングになります。
値を4つ指定した場合：	記述した順に[上][右][下][左]のパディングになります。

block⇒要素が横までいっぱいに広がり、縦に並んでいく
inline⇒要素が平ぺったく横に並んでいく
inline-block⇒blockとinlineの中間
none⇒非表示になる

display: inline-block;

  position: fixed;←スクロールしても位置が変わらない
          : relative;←相対位置の配置（staticの時が基準）

flex-direction: column; 縦に並べたい要素の親要素に指定する
margin: 0 auto; 中央寄せ


----Ruby----
puts "Hello World" #出力はputs
----
# コメントはpythonと同じ
----
puts 3 + 5 #演算子と数字の間に半角スペースが必要
----
puts "あ" + "い"　#文字もpythonと同じように足せる
----
# 変数はpythonと同様型宣言が必要ない。
----
# 文字列と整数を足す場合は
age = 19
puts "#{age}歳です"
----
# if文 ※インデントは必ずしも描く必要はないが、どのプログラムでも描くことは推奨されている
if 条件式 1
  処理
elsif 条件式 2
  処理
else
  処理
end
かつ(and) &&
または(or) ||
nilを入れるとFalse扱いになる
----
# 配列
配列はpythonのリストと同じ
インデックス番号も0スタートで同様
list = ["a", "b", "c"]

puts list[0]
-> a
----
# ループ処理
配列.each do |変数名|
  処理
end
変数のリスト分の回数が実行される
||で囲んだ変数はループ内のみで使用できる
ループ内の変数の使用できる範囲を**スコープ**と呼ぶ
----
# ハッシュ
pythonでいう辞書型に近い
ハッシュ = {キー1　=> 値1, キー2 => 値2}
呼び出し↓
puts ハッシュ[キー1]
更新or追加↓
ハッシュ[キー1] = 値3
※ハッシュはpythonと同じように書くこともできるが、その場合はシンボルで呼び出す必要がある↓
※何もないキーを呼び出した場合はエラーにならず、nilという扱いになる。（pythonでいうNaN(?)）
pythonのようにリストの中に入れる事もできる。
----
# シンボル
:name #:（コロン）をつけることにより、クォーテーションで囲ったのと同じになる
※シンボルを使った場合は呼び出しも:（コロン）をつける必要がある。
----
# def(関数)
def 関数
処理
end
pythonに近い。endが必要。

真偽値を出す場合は？をつけるのが慣習。
def negative?(number)
  return number < 0
end

def test(name:,age:)
  puts "名前は#{name}"
  puts "年齢は#{age}"
end
test(name:"もりやま",age:"25")
のように引数を明記できる

----
# クラス
class Test
  attr_accessor シンボル(:testのようなもの(上に記述あり))
end
インスタンス生成↓
test1 = Test.new
test1.test = "てすと"　#←値を代入できる

内部でメソッドを呼び出す↓
class Test
  attr_accessor シンボル
  def aaa
    puts "あああ"
  end
end
test1 = Test.new
test1.aaa -> "あああ"
pythonと同様、self.変数名でインスタンス変数を扱うことができる

class内で**initialize**メソッドを定義するとTest.newでインスタンスが生成された直後にinitializeメソッドが呼び出される。
(pythonの**__init__()**とおなじ（？）)
def initialize(name:, age:)　←コロン必要
  self.name = name
  self.age  = age
end
インスタンス生成で呼び出される↓
test1 = Test.new(name:"もりやま", age:25)
----
# 別ファイルとして呼び出し(pythonでいうimport)
test.rbというファイルだったら
require "./test"
test1 = Test.new(name:"もりやま", age:25)
のように呼び出せる
----
# 入力受け付け（pythonでいうinput()）
input = gets.chomp
puts "入力は#{input}です"

number = gets.chomp.to_i #整数(float)として読み込み

----
# クラスの継承
class Moriyama < Test
end
スーパークラスもpythonと同様
super(name: name,price: price)
----
----Ruby on Rails----
一度作ってみないと分からないかも？
Railsチュートリアルもやってみる

# CLI
$rails new tweet_app(アプリケーション名)
で開発に必要なフォルダやファイルが生成される。

$rails server 
サーバーを立ち上げることができる

$rails generate controller home top
トップページが自動で作られる

#ルーティング
config/routes.rbに定義され、
get "URL" => "コントローラー名#アクション名"
で描かれる。

crss cssを効率的に書く文法

画像はパブリックフォルダに置く

# @
@をつけて変数を定義するとビューファイル内でも使用することができる

# DBを指示するためのファイル（マイグレーションファイル）作成コマンド
$rails g model Post content:text

# DBに変更を反映するコマンド
$rails db:migrate

# rails console
post1 = Post.new(content: "aiueo")　#DBの"aiueo"作成
post1.save #DB保存

# views/layouts/application.html.erbの<%= yield %>
各ビューファイルはここに保存される。（ヘッダーを共有できる）

# link to
